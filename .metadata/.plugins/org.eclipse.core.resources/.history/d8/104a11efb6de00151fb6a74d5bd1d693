package com.example.printertest;

import io.socket.IOAcknowledge;
import io.socket.IOCallback;
import io.socket.SocketIO;
import io.socket.SocketIOException;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.net.MalformedURLException;

import org.json.JSONObject;

import android.app.Activity;
import android.os.Bundle;
import android.os.Environment;
import android.view.View;
import android.view.View.OnClickListener;
import android.webkit.CookieManager;
import android.webkit.WebView;
import android.widget.Button;
import android.widget.Toast;

public class MainActivity extends Activity {

	File external_file;
	FileWriter writer;
	Button bprint;
	String fileO;
	String printer_content;
	WebView Wv;
	static final String SOCKET_HOST= "http://10.2.2.180:9100";
	static final String TAG ="Printer";  

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Tracer.debug(TAG, "[onCreate] _ " + "");
		setContentView(R.layout.activity_main);
		Wv = (WebView)findViewById(R.id.webView1);
		Wv.getSettings().setLightTouchEnabled(true);
		Wv.getSettings().setJavaScriptEnabled(true);
		File sdCard = Environment.getExternalStorageDirectory();

		// directory -- dir_geolocation
		File directory = new File(sdCard.getAbsolutePath() + "/dir_print");
		directory.mkdirs();

		// filename -- coordinates.txt
		fileO = "delhi.prn";

		try {
			Tracer.debug(TAG, "[onCreate] _ " + "try");
			external_file = new File(directory, fileO);

			BufferedReader br = new BufferedReader(new FileReader(external_file));
			try {
				StringBuilder sb = new StringBuilder();
				String line = br.readLine();

				while (line != null) {
					sb.append(line);
					sb.append("\n");
					line = br.readLine();
				}
				printer_content = sb.toString();
			} finally {
				br.close();
			}


		} catch (Exception e) {
			Tracer.debug(TAG, "[onCreate] _ " + "catch");
			e.printStackTrace();
		}

		bprint = (Button)findViewById(R.id.btnprint);
		bprint.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				Tracer.debug(TAG, "[onClick] _ " + "button call");
				print_fun(printer_content);
			}
		});

	}

	public void print_fun(String str)
	{
		try {
			Tracer.debug(TAG, "[print_fun] _ " + "try");
			String cookie = CookieManager.getInstance().getCookie(SOCKET_HOST);

			SocketIO socket = new SocketIO(SOCKET_HOST);
			socket.addHeader("Cookie", cookie);
			socket.connect(new IOCallback() {

				@Override
				public void onMessage(JSONObject arg0, IOAcknowledge arg1) {
					// TODO Auto-generated method stub
					Tracer.debug(TAG, "[onMessage] _ " + "");
				}

				@Override
				public void onMessage(String arg0, IOAcknowledge arg1) {
					// TODO Auto-generated method stub
					Tracer.debug(TAG, "[onMessage] _ " + "");
				}

				@Override
				public void onError(SocketIOException arg0) {
					// TODO Auto-generated method stub
					Tracer.debug(TAG, "[onError] _ " + arg0.toString());

				}

				@Override
				public void onDisconnect() {
					// TODO Auto-generated method stub
					Tracer.debug(TAG, "[onDisconnect] _ " + "");
				}

				@Override
				public void onConnect() {
					// TODO Auto-generated method stub
					Tracer.debug(TAG, "[connect] _ " );
					Toast.makeText(MainActivity.this, "Connected", Toast.LENGTH_SHORT).show();
				}

				@Override
				public void on(String arg0, IOAcknowledge arg1, Object... arg2) {
					// TODO Auto-generated method stub
					Tracer.debug(TAG, "[on] _ " );			
				}
			});
			Tracer.debug(TAG, "[print_fun] _ " + str);
			socket.send(str);


		} catch (MalformedURLException e) {
			Tracer.debug(TAG, "[print_fun] _ " + "catch");
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}



}







